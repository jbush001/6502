// This file autogenerated by make_inst_tab.py
struct m6502;

enum address_mode {
    IMPLIED,
    IND_ZERO_PAGE_X,
    IMMEDIATE,
    INDIRECT,
    ABSOLUTE_X,
    IND_ZERO_PAGE_Y,
    ZERO_PAGE,
    ZERO_PAGE_X,
    ABSOLUTE,
    ABSOLUTE_Y,
};

void inst_ROR(struct m6502 *proc, enum address_mode mode);
void inst_TXS(struct m6502 *proc, enum address_mode mode);
void inst_RTS(struct m6502 *proc, enum address_mode mode);
void inst_PLA(struct m6502 *proc, enum address_mode mode);
void inst_LDX(struct m6502 *proc, enum address_mode mode);
void inst_INY(struct m6502 *proc, enum address_mode mode);
void inst_STA(struct m6502 *proc, enum address_mode mode);
void inst_BCC(struct m6502 *proc, enum address_mode mode);
void inst_LDA(struct m6502 *proc, enum address_mode mode);
void inst_DEY(struct m6502 *proc, enum address_mode mode);
void inst_CLV(struct m6502 *proc, enum address_mode mode);
void inst_TSX(struct m6502 *proc, enum address_mode mode);
void inst_SED(struct m6502 *proc, enum address_mode mode);
void inst_CMP(struct m6502 *proc, enum address_mode mode);
void inst_BEQ(struct m6502 *proc, enum address_mode mode);
void inst_BVS(struct m6502 *proc, enum address_mode mode);
void inst_STY(struct m6502 *proc, enum address_mode mode);
void inst_DEX(struct m6502 *proc, enum address_mode mode);
void inst_JSR(struct m6502 *proc, enum address_mode mode);
void inst_CPX(struct m6502 *proc, enum address_mode mode);
void inst_CLI(struct m6502 *proc, enum address_mode mode);
void inst_CPY(struct m6502 *proc, enum address_mode mode);
void inst_CLD(struct m6502 *proc, enum address_mode mode);
void inst_TAY(struct m6502 *proc, enum address_mode mode);
void inst_INX(struct m6502 *proc, enum address_mode mode);
void inst_BPL(struct m6502 *proc, enum address_mode mode);
void inst_CLC(struct m6502 *proc, enum address_mode mode);
void inst_BCS(struct m6502 *proc, enum address_mode mode);
void inst_ORA(struct m6502 *proc, enum address_mode mode);
void inst_PLP(struct m6502 *proc, enum address_mode mode);
void inst_ADC(struct m6502 *proc, enum address_mode mode);
void inst_ASL(struct m6502 *proc, enum address_mode mode);
void inst_BIT(struct m6502 *proc, enum address_mode mode);
void inst_JMP(struct m6502 *proc, enum address_mode mode);
void inst_TAX(struct m6502 *proc, enum address_mode mode);
void inst_TXA(struct m6502 *proc, enum address_mode mode);
void inst_SEC(struct m6502 *proc, enum address_mode mode);
void inst_LSR(struct m6502 *proc, enum address_mode mode);
void inst_PHA(struct m6502 *proc, enum address_mode mode);
void inst_TYA(struct m6502 *proc, enum address_mode mode);
void inst_DEC(struct m6502 *proc, enum address_mode mode);
void inst_AND(struct m6502 *proc, enum address_mode mode);
void inst_ROL(struct m6502 *proc, enum address_mode mode);
void inst_EOR(struct m6502 *proc, enum address_mode mode);
void inst_SEI(struct m6502 *proc, enum address_mode mode);
void inst_BVC(struct m6502 *proc, enum address_mode mode);
void inst_LDY(struct m6502 *proc, enum address_mode mode);
void inst_BNE(struct m6502 *proc, enum address_mode mode);
void inst_SBC(struct m6502 *proc, enum address_mode mode);
void inst_BRK(struct m6502 *proc, enum address_mode mode);
void inst_INVALID(struct m6502 *proc, enum address_mode mode);
void inst_STX(struct m6502 *proc, enum address_mode mode);
void inst_INC(struct m6502 *proc, enum address_mode mode);
void inst_NOP(struct m6502 *proc, enum address_mode mode);
void inst_RTI(struct m6502 *proc, enum address_mode mode);
void inst_BMI(struct m6502 *proc, enum address_mode mode);
void inst_PHP(struct m6502 *proc, enum address_mode mode);

struct instruction {
    enum address_mode mode;
    void (*func)(struct m6502 *proc, enum address_mode mode);
    const char *mnemonic;
};

const struct instruction INSTRUCTIONS[] = {
    { IMPLIED, inst_BRK, "BRK" },       // 0x0
    { IND_ZERO_PAGE_X, inst_ORA, "ORA" },
    { IMMEDIATE, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_INVALID, "???" },
    { ZERO_PAGE, inst_ORA, "ORA" },
    { ZERO_PAGE, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_PHP, "PHP" },
    { IMMEDIATE, inst_ORA, "ORA" },
    { IMPLIED, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_INVALID, "???" },
    { ABSOLUTE, inst_ORA, "ORA" },
    { ABSOLUTE, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BPL, "BPL" },       // 0x10
    { IND_ZERO_PAGE_Y, inst_ORA, "ORA" },
    { IMPLIED, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_ORA, "ORA" },
    { ZERO_PAGE_X, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_CLC, "CLC" },
    { ABSOLUTE_Y, inst_ORA, "ORA" },
    { IMPLIED, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_ORA, "ORA" },
    { ABSOLUTE_X, inst_ASL, "ASL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_JSR, "JSR" },       // 0x20
    { IND_ZERO_PAGE_X, inst_AND, "AND" },
    { IMMEDIATE, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_BIT, "BIT" },
    { ZERO_PAGE, inst_AND, "AND" },
    { ZERO_PAGE, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_PLP, "PLP" },
    { IMMEDIATE, inst_AND, "AND" },
    { IMPLIED, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_BIT, "BIT" },
    { ABSOLUTE, inst_AND, "AND" },
    { ABSOLUTE, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BMI, "BMI" },       // 0x30
    { IND_ZERO_PAGE_Y, inst_AND, "AND" },
    { IMPLIED, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_BIT, "BIT" },
    { ZERO_PAGE_X, inst_AND, "AND" },
    { ZERO_PAGE_X, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_SEC, "SEC" },
    { ABSOLUTE_Y, inst_AND, "AND" },
    { IMPLIED, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_BIT, "BIT" },
    { ABSOLUTE_X, inst_AND, "AND" },
    { ABSOLUTE_X, inst_ROL, "ROL" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_RTI, "RTI" },       // 0x40
    { IND_ZERO_PAGE_X, inst_EOR, "EOR" },
    { IMMEDIATE, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_INVALID, "???" },
    { ZERO_PAGE, inst_EOR, "EOR" },
    { ZERO_PAGE, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_PHA, "PHA" },
    { IMMEDIATE, inst_EOR, "EOR" },
    { IMPLIED, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_JMP, "JMP" },
    { ABSOLUTE, inst_EOR, "EOR" },
    { ABSOLUTE, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BVC, "BVC" },       // 0x50
    { IND_ZERO_PAGE_Y, inst_EOR, "EOR" },
    { IMPLIED, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_EOR, "EOR" },
    { ZERO_PAGE_X, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_CLI, "CLI" },
    { ABSOLUTE_Y, inst_EOR, "EOR" },
    { IMPLIED, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_EOR, "EOR" },
    { ABSOLUTE_X, inst_LSR, "LSR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_RTS, "RTS" },       // 0x60
    { IND_ZERO_PAGE_X, inst_ADC, "ADC" },
    { IMMEDIATE, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_INVALID, "???" },
    { ZERO_PAGE, inst_ADC, "ADC" },
    { ZERO_PAGE, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_PLA, "PLA" },
    { IMMEDIATE, inst_ADC, "ADC" },
    { IMPLIED, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { INDIRECT, inst_JMP, "JMP" },
    { ABSOLUTE, inst_ADC, "ADC" },
    { ABSOLUTE, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BVS, "BVS" },       // 0x70
    { IND_ZERO_PAGE_Y, inst_ADC, "ADC" },
    { IMPLIED, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_ADC, "ADC" },
    { ZERO_PAGE_X, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_SEI, "SEI" },
    { ABSOLUTE_Y, inst_ADC, "ADC" },
    { IMPLIED, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_ADC, "ADC" },
    { ABSOLUTE_X, inst_ROR, "ROR" },
    { IMPLIED, inst_INVALID, "???" },
    { IMMEDIATE, inst_STY, "STY" },     // 0x80
    { IND_ZERO_PAGE_X, inst_STA, "STA" },
    { IMMEDIATE, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_STY, "STY" },
    { ZERO_PAGE, inst_STA, "STA" },
    { ZERO_PAGE, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_DEY, "DEY" },
    { IMMEDIATE, inst_STA, "STA" },
    { IMPLIED, inst_TXA, "TXA" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_STY, "STY" },
    { ABSOLUTE, inst_STA, "STA" },
    { ABSOLUTE, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BCC, "BCC" },       // 0x90
    { IND_ZERO_PAGE_Y, inst_STA, "STA" },
    { IMPLIED, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_STY, "STY" },
    { ZERO_PAGE_X, inst_STA, "STA" },
    { ZERO_PAGE_X, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_TYA, "TYA" },
    { ABSOLUTE_Y, inst_STA, "STA" },
    { IMPLIED, inst_TXS, "TXS" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_STY, "STY" },
    { ABSOLUTE_X, inst_STA, "STA" },
    { ABSOLUTE_X, inst_STX, "STX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMMEDIATE, inst_LDY, "LDY" },     // 0xa0
    { IND_ZERO_PAGE_X, inst_LDA, "LDA" },
    { IMMEDIATE, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_LDY, "LDY" },
    { ZERO_PAGE, inst_LDA, "LDA" },
    { ZERO_PAGE, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_TAY, "TAY" },
    { IMMEDIATE, inst_LDA, "LDA" },
    { IMPLIED, inst_TAX, "TAX" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_LDY, "LDY" },
    { ABSOLUTE, inst_LDA, "LDA" },
    { ABSOLUTE, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BCS, "BCS" },       // 0xb0
    { IND_ZERO_PAGE_Y, inst_LDA, "LDA" },
    { IMPLIED, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_LDY, "LDY" },
    { ZERO_PAGE_X, inst_LDA, "LDA" },
    { ZERO_PAGE_X, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_CLV, "CLV" },
    { ABSOLUTE_Y, inst_LDA, "LDA" },
    { IMPLIED, inst_TSX, "TSX" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_LDY, "LDY" },
    { ABSOLUTE_X, inst_LDA, "LDA" },
    { ABSOLUTE_X, inst_LDX, "LDX" },
    { IMPLIED, inst_INVALID, "???" },
    { IMMEDIATE, inst_CPY, "CPY" },     // 0xc0
    { IND_ZERO_PAGE_X, inst_CMP, "CMP" },
    { IMMEDIATE, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_CPY, "CPY" },
    { ZERO_PAGE, inst_CMP, "CMP" },
    { ZERO_PAGE, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_INY, "INY" },
    { IMMEDIATE, inst_CMP, "CMP" },
    { IMPLIED, inst_DEX, "DEX" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_CPY, "CPY" },
    { ABSOLUTE, inst_CMP, "CMP" },
    { ABSOLUTE, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BNE, "BNE" },       // 0xd0
    { IND_ZERO_PAGE_Y, inst_CMP, "CMP" },
    { IMPLIED, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_CPY, "CPY" },
    { ZERO_PAGE_X, inst_CMP, "CMP" },
    { ZERO_PAGE_X, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_CLD, "CLD" },
    { ABSOLUTE_Y, inst_CMP, "CMP" },
    { IMPLIED, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_CPY, "CPY" },
    { ABSOLUTE_X, inst_CMP, "CMP" },
    { ABSOLUTE_X, inst_DEC, "DEC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMMEDIATE, inst_CPX, "CPX" },     // 0xe0
    { IND_ZERO_PAGE_X, inst_SBC, "SBC" },
    { IMMEDIATE, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE, inst_CPX, "CPX" },
    { ZERO_PAGE, inst_SBC, "SBC" },
    { ZERO_PAGE, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_INX, "INX" },
    { IMMEDIATE, inst_SBC, "SBC" },
    { IMPLIED, inst_NOP, "NOP" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE, inst_CPX, "CPX" },
    { ABSOLUTE, inst_SBC, "SBC" },
    { ABSOLUTE, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_BEQ, "BEQ" },       // 0xf0
    { IND_ZERO_PAGE_Y, inst_SBC, "SBC" },
    { IMPLIED, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { ZERO_PAGE_X, inst_CPX, "CPX" },
    { ZERO_PAGE_X, inst_SBC, "SBC" },
    { ZERO_PAGE_X, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { IMPLIED, inst_SED, "SED" },
    { ABSOLUTE_Y, inst_SBC, "SBC" },
    { IMPLIED, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
    { ABSOLUTE_X, inst_CPX, "CPX" },
    { ABSOLUTE_X, inst_SBC, "SBC" },
    { ABSOLUTE_X, inst_INC, "INC" },
    { IMPLIED, inst_INVALID, "???" },
};
